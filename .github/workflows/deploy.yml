name: 🚀 Deploy to Azure

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  AZURE_FUNCTIONAPP_NAME: crudappfunctiondatafast
  AZURE_STATICWEBAPP_NAME: crudappstaticwebappdatafast
  AZURE_RESOURCE_GROUP: rg-crud-serverless-datafast

jobs:
  deploy-infrastructure:
    name: 🏗️ Deploy Infrastructure
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
        
    - name: 🔑 Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: 🔧 Terraform Init
      run: |
        cd infrastructure
        terraform init
        
    - name: 📋 Terraform Plan
      run: |
        cd infrastructure
        terraform plan -out=tfplan
        
    - name: 🚀 Terraform Apply
      run: |
        cd infrastructure
        terraform apply -auto-approve tfplan
        
    - name: 📤 Save Terraform Outputs
      run: |
        cd infrastructure
        terraform output -json > terraform-outputs.json
        
    - name: 📦 Upload Terraform Outputs
      uses: actions/upload-artifact@v4
      with:
        name: terraform-outputs
        path: infrastructure/terraform-outputs.json

  deploy-backend:
    name: 🔧 Deploy Backend
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure]
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: 📦 Restore dependencies
      run: dotnet restore backend/TaskApi.csproj
      
    - name: 🔨 Build backend
      run: dotnet build backend/TaskApi.csproj --configuration Release --no-restore
      
    - name: 📦 Publish backend
      run: dotnet publish backend/TaskApi.csproj --configuration Release --output ./backend/publish
      
    - name: 📦 Create deployment package
      run: |
        cd backend/publish
        zip -r ../function-app.zip .
        
    - name: 🔑 Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: 🚀 Deploy to Azure Functions
      run: |
        az functionapp deployment source config-zip \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
          --src backend/function-app.zip
          
    - name: 🔧 Configure App Settings
      run: |
        az functionapp config appsettings set \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
          --settings SqlConnectionString="${{ secrets.SQL_CONNECTION_STRING }}"

  deploy-frontend:
    name: 🌐 Deploy Frontend
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure]
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: 📦 Install dependencies
      run: |
        cd frontend
        npm ci
        
    - name: 🔨 Build frontend
      run: |
        cd frontend
        npm run build
        
    - name: 🚀 Deploy to Azure Static Web Apps
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: "upload"
        app_location: "frontend"
        api_location: ""
        output_location: "out"

  health-check:
    name: 🩺 Health Check
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    
    steps:
    - name: 🔧 Wait for deployment
      run: sleep 30
      
    - name: 🩺 Check backend health
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.AZURE_FUNCTIONAPP_NAME }}.azurewebsites.net/api/tasks)
        if [ $response -eq 200 ]; then
          echo "✅ Backend health check passed"
        else
          echo "❌ Backend health check failed with status $response"
          exit 1
        fi
        
    - name: 🩺 Check frontend health
      run: |
        # Nota: Se debe obtener la URL de Static Web App desde los outputs de Terraform
        echo "✅ Frontend deployment completed"
        
    - name: 📢 Deployment notification
      run: |
        echo "🎉 Deployment completed successfully!"
        echo "🔗 Backend API: https://${{ env.AZURE_FUNCTIONAPP_NAME }}.azurewebsites.net/api"
        echo "🔗 Frontend: Check Azure Portal -> Static Web Apps"
